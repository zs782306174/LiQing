// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  /// <summary>
  ///登录部分
  /// </summary>
  public partial class C2R_Login : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Login> _parser = new pb::MessageParser<C2R_Login>(() => (C2R_Login)MessagePool.Instance.Fetch(typeof(C2R_Login)));
    public static pb::MessageParser<C2R_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    /// <summary>
    /// 帐号
    /// </summary>
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    /// <summary>
    /// 密码
    /// </summary>
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Login : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Login> _parser = new pb::MessageParser<R2C_Login>(() => (R2C_Login)MessagePool.Instance.Fetch(typeof(R2C_Login)));
    public static pb::MessageParser<R2C_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private long playerId_;
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (PlayerId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(PlayerId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (PlayerId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      address_ = "";
      key_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      playerId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<C2G_LoginGate> _parser = new pb::MessageParser<C2G_LoginGate>(() => (C2G_LoginGate)MessagePool.Instance.Fetch(typeof(C2G_LoginGate)));
    public static pb::MessageParser<C2G_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long key_;
    /// <summary>
    /// 帐号
    /// </summary>
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      key_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<G2C_LoginGate> _parser = new pb::MessageParser<G2C_LoginGate>(() => (G2C_LoginGate)MessagePool.Instance.Fetch(typeof(G2C_LoginGate)));
    public static pb::MessageParser<G2C_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long playerId_;
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerId_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///注册部分
  /// </summary>
  public partial class C2R_Register : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Register> _parser = new pb::MessageParser<C2R_Register>(() => (C2R_Register)MessagePool.Instance.Fetch(typeof(C2R_Register)));
    public static pb::MessageParser<C2R_Register> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Register : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Register> _parser = new pb::MessageParser<R2C_Register>(() => (R2C_Register)MessagePool.Instance.Fetch(typeof(R2C_Register)));
    public static pb::MessageParser<R2C_Register> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取用户信息
  /// </summary>
  public partial class C2G_GetUserInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2G_GetUserInfo> _parser = new pb::MessageParser<C2G_GetUserInfo>(() => (C2G_GetUserInfo)MessagePool.Instance.Fetch(typeof(C2G_GetUserInfo)));
    public static pb::MessageParser<C2G_GetUserInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private long playerId_;
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (PlayerId != 0L) {
        output.WriteRawTag(224, 5);
        output.WriteInt64(PlayerId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (PlayerId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      playerId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 736: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取用户信息
  /// </summary>
  public partial class G2C_GetUserInfo : pb::IMessage {
    private static readonly pb::MessageParser<G2C_GetUserInfo> _parser = new pb::MessageParser<G2C_GetUserInfo>(() => (G2C_GetUserInfo)MessagePool.Instance.Fetch(typeof(G2C_GetUserInfo)));
    public static pb::MessageParser<G2C_GetUserInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private int playerId_;
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    private string userName_ = "";
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int level_;
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int point_;
    public int Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    private int diamods_;
    public int Diamods {
      get { return diamods_; }
      set {
        diamods_ = value;
      }
    }

    private int goldens_;
    public int Goldens {
      get { return goldens_; }
      set {
        goldens_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(224, 5);
        output.WriteInt32(PlayerId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteString(UserName);
      }
      if (Level != 0) {
        output.WriteRawTag(240, 5);
        output.WriteInt32(Level);
      }
      if (Point != 0) {
        output.WriteRawTag(248, 5);
        output.WriteInt32(Point);
      }
      if (Diamods != 0) {
        output.WriteRawTag(128, 6);
        output.WriteInt32(Diamods);
      }
      if (Goldens != 0) {
        output.WriteRawTag(136, 6);
        output.WriteInt32(Goldens);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(146, 6);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (PlayerId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (UserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Level != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Point != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      if (Diamods != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Diamods);
      }
      if (Goldens != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Goldens);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      playerId_ = 0;
      userName_ = "";
      level_ = 0;
      point_ = 0;
      diamods_ = 0;
      goldens_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 736: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 746: {
            UserName = input.ReadString();
            break;
          }
          case 752: {
            Level = input.ReadInt32();
            break;
          }
          case 760: {
            Point = input.ReadInt32();
            break;
          }
          case 768: {
            Diamods = input.ReadInt32();
            break;
          }
          case 776: {
            Goldens = input.ReadInt32();
            break;
          }
          case 786: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_TestHotfixMessage : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TestHotfixMessage> _parser = new pb::MessageParser<G2C_TestHotfixMessage>(() => (G2C_TestHotfixMessage)MessagePool.Instance.Fetch(typeof(G2C_TestHotfixMessage)));
    public static pb::MessageParser<G2C_TestHotfixMessage> Parser { get { return _parser; } }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TestActorRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TestActorRequest> _parser = new pb::MessageParser<C2M_TestActorRequest>(() => (C2M_TestActorRequest)MessagePool.Instance.Fetch(typeof(C2M_TestActorRequest)));
    public static pb::MessageParser<C2M_TestActorRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TestActorResponse : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TestActorResponse> _parser = new pb::MessageParser<M2C_TestActorResponse>(() => (M2C_TestActorResponse)MessagePool.Instance.Fetch(typeof(M2C_TestActorResponse)));
    public static pb::MessageParser<M2C_TestActorResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GetHeroDataRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetHeroDataRequest> _parser = new pb::MessageParser<C2M_GetHeroDataRequest>(() => (C2M_GetHeroDataRequest)MessagePool.Instance.Fetch(typeof(C2M_GetHeroDataRequest)));
    public static pb::MessageParser<C2M_GetHeroDataRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitID_;
    /// <summary>
    ///unit的ID
    /// </summary>
    public long UnitID {
      get { return unitID_; }
      set {
        unitID_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitID);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitID);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitID_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitID = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetHeroDataResponse : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetHeroDataResponse> _parser = new pb::MessageParser<M2C_GetHeroDataResponse>(() => (M2C_GetHeroDataResponse)MessagePool.Instance.Fetch(typeof(M2C_GetHeroDataResponse)));
    public static pb::MessageParser<M2C_GetHeroDataResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private long heroDataID_;
    public long HeroDataID {
      get { return heroDataID_; }
      set {
        heroDataID_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (HeroDataID != 0L) {
        output.WriteRawTag(224, 5);
        output.WriteInt64(HeroDataID);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(242, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (HeroDataID != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HeroDataID);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      heroDataID_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 736: {
            HeroDataID = input.ReadInt64();
            break;
          }
          case 754: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class OperatePoint : pb::IMessage {
    private static readonly pb::MessageParser<OperatePoint> _parser = new pb::MessageParser<OperatePoint>(() => (OperatePoint)MessagePool.Instance.Fetch(typeof(OperatePoint)));
    public static pb::MessageParser<OperatePoint> Parser { get { return _parser; } }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class UserInput_SkillCmd : pb::IMessage {
    private static readonly pb::MessageParser<UserInput_SkillCmd> _parser = new pb::MessageParser<UserInput_SkillCmd>(() => (UserInput_SkillCmd)MessagePool.Instance.Fetch(typeof(UserInput_SkillCmd)));
    public static pb::MessageParser<UserInput_SkillCmd> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private long skillId_;
    public long SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long selectUnit_;
    public long SelectUnit {
      get { return selectUnit_; }
      set {
        selectUnit_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.OperatePoint> _repeated_points_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.OperatePoint.Parser);
    private pbc::RepeatedField<global::ETHotfix.OperatePoint> points_ = new pbc::RepeatedField<global::ETHotfix.OperatePoint>();
    public pbc::RepeatedField<global::ETHotfix.OperatePoint> Points {
      get { return points_; }
      set { points_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SelectUnit != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SelectUnit);
      }
      points_.WriteTo(output, _repeated_points_codec);
      if (SkillId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(SkillId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (Id != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(Id);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(250, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (SkillId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SkillId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (SelectUnit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SelectUnit);
      }
      size += points_.CalculateSize(_repeated_points_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      selectUnit_ = 0;
      for (int i = 0; i < points_.Count; i++) { MessagePool.Instance.Recycle(points_[i]); }
      points_.Clear();
      skillId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      id_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SelectUnit = input.ReadInt64();
            break;
          }
          case 18: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 80: {
            SkillId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 752: {
            Id = input.ReadInt64();
            break;
          }
          case 762: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_UserInput_SkillCmd : pb::IMessage {
    private static readonly pb::MessageParser<M2C_UserInput_SkillCmd> _parser = new pb::MessageParser<M2C_UserInput_SkillCmd>(() => (M2C_UserInput_SkillCmd)MessagePool.Instance.Fetch(typeof(M2C_UserInput_SkillCmd)));
    public static pb::MessageParser<M2C_UserInput_SkillCmd> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private long skillId_;
    public long SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    private int skillState_;
    public int SkillState {
      get { return skillState_; }
      set {
        skillState_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long selectUnit_;
    public long SelectUnit {
      get { return selectUnit_; }
      set {
        selectUnit_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.OperatePoint> _repeated_points_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.OperatePoint.Parser);
    private pbc::RepeatedField<global::ETHotfix.OperatePoint> points_ = new pbc::RepeatedField<global::ETHotfix.OperatePoint>();
    public pbc::RepeatedField<global::ETHotfix.OperatePoint> Points {
      get { return points_; }
      set { points_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SelectUnit != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SelectUnit);
      }
      points_.WriteTo(output, _repeated_points_codec);
      if (SkillId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(SkillId);
      }
      if (SkillState != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SkillState);
      }
      if (Id != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(Id);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(242, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (SkillId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SkillId);
      }
      if (SkillState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillState);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (SelectUnit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SelectUnit);
      }
      size += points_.CalculateSize(_repeated_points_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      selectUnit_ = 0;
      for (int i = 0; i < points_.Count; i++) { MessagePool.Instance.Recycle(points_[i]); }
      points_.Clear();
      skillId_ = 0;
      skillState_ = 0;
      id_ = 0;
      actorId_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SelectUnit = input.ReadInt64();
            break;
          }
          case 18: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 80: {
            SkillId = input.ReadInt64();
            break;
          }
          case 88: {
            SkillState = input.ReadInt32();
            break;
          }
          case 96: {
            Id = input.ReadInt64();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 754: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_B2S_VectorBase : pb::IMessage {
    private static readonly pb::MessageParser<M2C_B2S_VectorBase> _parser = new pb::MessageParser<M2C_B2S_VectorBase>(() => (M2C_B2S_VectorBase)MessagePool.Instance.Fetch(typeof(M2C_B2S_VectorBase)));
    public static pb::MessageParser<M2C_B2S_VectorBase> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (X != 0F) {
        output.WriteRawTag(221, 5);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(229, 5);
        output.WriteFloat(Y);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (X != 0F) {
        size += 2 + 4;
      }
      if (Y != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      x_ = 0f;
      y_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 733: {
            X = input.ReadFloat();
            break;
          }
          case 741: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_B2S_Debugger_Circle : pb::IMessage {
    private static readonly pb::MessageParser<M2C_B2S_Debugger_Circle> _parser = new pb::MessageParser<M2C_B2S_Debugger_Circle>(() => (M2C_B2S_Debugger_Circle)MessagePool.Instance.Fetch(typeof(M2C_B2S_Debugger_Circle)));
    public static pb::MessageParser<M2C_B2S_Debugger_Circle> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private float radius_;
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    private long sustainTime_;
    /// <summary>
    ///持续时间
    /// </summary>
    public long SustainTime {
      get { return sustainTime_; }
      set {
        sustainTime_ = value;
      }
    }

    private global::ETHotfix.M2C_B2S_VectorBase pos_;
    public global::ETHotfix.M2C_B2S_VectorBase Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
      if (SustainTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SustainTime);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (Radius != 0F) {
        output.WriteRawTag(245, 5);
        output.WriteFloat(Radius);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Radius != 0F) {
        size += 2 + 4;
      }
      if (SustainTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SustainTime);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      if (pos_ != null) MessagePool.Instance.Recycle(pos_); pos_ = null;
      sustainTime_ = 0;
      actorId_ = 0;
      radius_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::ETHotfix.M2C_B2S_VectorBase();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 40: {
            SustainTime = input.ReadInt64();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 757: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_B2S_Debugger_Polygon : pb::IMessage {
    private static readonly pb::MessageParser<M2C_B2S_Debugger_Polygon> _parser = new pb::MessageParser<M2C_B2S_Debugger_Polygon>(() => (M2C_B2S_Debugger_Polygon)MessagePool.Instance.Fetch(typeof(M2C_B2S_Debugger_Polygon)));
    public static pb::MessageParser<M2C_B2S_Debugger_Polygon> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private long sustainTime_;
    /// <summary>
    ///持续时间
    /// </summary>
    public long SustainTime {
      get { return sustainTime_; }
      set {
        sustainTime_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.M2C_B2S_VectorBase> _repeated_vects_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.M2C_B2S_VectorBase.Parser);
    private pbc::RepeatedField<global::ETHotfix.M2C_B2S_VectorBase> vects_ = new pbc::RepeatedField<global::ETHotfix.M2C_B2S_VectorBase>();
    public pbc::RepeatedField<global::ETHotfix.M2C_B2S_VectorBase> Vects {
      get { return vects_; }
      set { vects_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      vects_.WriteTo(output, _repeated_vects_codec);
      if (SustainTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SustainTime);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (SustainTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SustainTime);
      }
      size += vects_.CalculateSize(_repeated_vects_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      for (int i = 0; i < vects_.Count; i++) { MessagePool.Instance.Recycle(vects_[i]); }
      vects_.Clear();
      sustainTime_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            vects_.AddEntriesFrom(input, _repeated_vects_codec);
            break;
          }
          case 40: {
            SustainTime = input.ReadInt64();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => (PlayerInfo)MessagePool.Instance.Fetch(typeof(PlayerInfo)));
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2G_PlayerInfo> _parser = new pb::MessageParser<C2G_PlayerInfo>(() => (C2G_PlayerInfo)MessagePool.Instance.Fetch(typeof(C2G_PlayerInfo)));
    public static pb::MessageParser<C2G_PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<G2C_PlayerInfo> _parser = new pb::MessageParser<G2C_PlayerInfo>(() => (G2C_PlayerInfo)MessagePool.Instance.Fetch(typeof(G2C_PlayerInfo)));
    public static pb::MessageParser<G2C_PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.PlayerInfo playerInfo_;
    public global::ETHotfix.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.PlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.PlayerInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.PlayerInfo> playerInfos_ = new pbc::RepeatedField<global::ETHotfix.PlayerInfo>();
    public pbc::RepeatedField<global::ETHotfix.PlayerInfo> PlayerInfos {
      get { return playerInfos_; }
      set { playerInfos_ = value; }
    }

    private static readonly pb::FieldCodec<string> _repeated_testRepeatedString_codec
        = pb::FieldCodec.ForString(26);
    private pbc::RepeatedField<string> testRepeatedString_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> TestRepeatedString {
      get { return testRepeatedString_; }
      set { testRepeatedString_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_testRepeatedInt32_codec
        = pb::FieldCodec.ForInt32(34);
    private pbc::RepeatedField<int> testRepeatedInt32_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> TestRepeatedInt32 {
      get { return testRepeatedInt32_; }
      set { testRepeatedInt32_ = value; }
    }

    private static readonly pb::FieldCodec<long> _repeated_testRepeatedInt64_codec
        = pb::FieldCodec.ForInt64(42);
    private pbc::RepeatedField<long> testRepeatedInt64_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> TestRepeatedInt64 {
      get { return testRepeatedInt64_; }
      set { testRepeatedInt64_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      testRepeatedString_.WriteTo(output, _repeated_testRepeatedString_codec);
      testRepeatedInt32_.WriteTo(output, _repeated_testRepeatedInt32_codec);
      testRepeatedInt64_.WriteTo(output, _repeated_testRepeatedInt64_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      size += testRepeatedString_.CalculateSize(_repeated_testRepeatedString_codec);
      size += testRepeatedInt32_.CalculateSize(_repeated_testRepeatedInt32_codec);
      size += testRepeatedInt64_.CalculateSize(_repeated_testRepeatedInt64_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (playerInfo_ != null) MessagePool.Instance.Recycle(playerInfo_); playerInfo_ = null;
      for (int i = 0; i < playerInfos_.Count; i++) { MessagePool.Instance.Recycle(playerInfos_[i]); }
      playerInfos_.Clear();
      testRepeatedString_.Clear();
      testRepeatedInt32_.Clear();
      testRepeatedInt64_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::ETHotfix.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 18: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
          case 26: {
            testRepeatedString_.AddEntriesFrom(input, _repeated_testRepeatedString_codec);
            break;
          }
          case 34:
          case 32: {
            testRepeatedInt32_.AddEntriesFrom(input, _repeated_testRepeatedInt32_codec);
            break;
          }
          case 42:
          case 40: {
            testRepeatedInt64_.AddEntriesFrom(input, _repeated_testRepeatedInt64_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_PlayerOffline : pb::IMessage {
    private static readonly pb::MessageParser<G2C_PlayerOffline> _parser = new pb::MessageParser<G2C_PlayerOffline>(() => (G2C_PlayerOffline)MessagePool.Instance.Fetch(typeof(G2C_PlayerOffline)));
    public static pb::MessageParser<G2C_PlayerOffline> Parser { get { return _parser; } }

    private int mPlayerOfflineType_;
    public int MPlayerOfflineType {
      get { return mPlayerOfflineType_; }
      set {
        mPlayerOfflineType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MPlayerOfflineType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MPlayerOfflineType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MPlayerOfflineType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MPlayerOfflineType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mPlayerOfflineType_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MPlayerOfflineType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_CreateSpiling : pb::IMessage {
    private static readonly pb::MessageParser<Actor_CreateSpiling> _parser = new pb::MessageParser<Actor_CreateSpiling>(() => (Actor_CreateSpiling)MessagePool.Instance.Fetch(typeof(Actor_CreateSpiling)));
    public static pb::MessageParser<Actor_CreateSpiling> Parser { get { return _parser; } }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    private long parentUnitId_;
    /// <summary>
    ///所归属的父实体id
    /// </summary>
    public long ParentUnitId {
      get { return parentUnitId_; }
      set {
        parentUnitId_ = value;
      }
    }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      if (ParentUnitId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ParentUnitId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (Id != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (ParentUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentUnitId);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      parentUnitId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
          case 40: {
            ParentUnitId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 752: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_ChangeHeroHP : pb::IMessage {
    private static readonly pb::MessageParser<M2C_ChangeHeroHP> _parser = new pb::MessageParser<M2C_ChangeHeroHP>(() => (M2C_ChangeHeroHP)MessagePool.Instance.Fetch(typeof(M2C_ChangeHeroHP)));
    public static pb::MessageParser<M2C_ChangeHeroHP> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private float changeHPValue_;
    public float ChangeHPValue {
      get { return changeHPValue_; }
      set {
        changeHPValue_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ChangeHPValue != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(ChangeHPValue);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (UnitId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(UnitId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (ChangeHPValue != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      changeHPValue_ = 0f;
      rpcId_ = 0;
      actorId_ = 0;
      unitId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 21: {
            ChangeHPValue = input.ReadFloat();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 752: {
            UnitId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_ChangeHeroMP : pb::IMessage {
    private static readonly pb::MessageParser<M2C_ChangeHeroMP> _parser = new pb::MessageParser<M2C_ChangeHeroMP>(() => (M2C_ChangeHeroMP)MessagePool.Instance.Fetch(typeof(M2C_ChangeHeroMP)));
    public static pb::MessageParser<M2C_ChangeHeroMP> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private float changeMPValue_;
    public float ChangeMPValue {
      get { return changeMPValue_; }
      set {
        changeMPValue_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ChangeMPValue != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(ChangeMPValue);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (UnitId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(UnitId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (ChangeMPValue != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      changeMPValue_ = 0f;
      rpcId_ = 0;
      actorId_ = 0;
      unitId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 21: {
            ChangeMPValue = input.ReadFloat();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 752: {
            UnitId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_FrieBattleEvent_PlayEffect : pb::IMessage {
    private static readonly pb::MessageParser<M2C_FrieBattleEvent_PlayEffect> _parser = new pb::MessageParser<M2C_FrieBattleEvent_PlayEffect>(() => (M2C_FrieBattleEvent_PlayEffect)MessagePool.Instance.Fetch(typeof(M2C_FrieBattleEvent_PlayEffect)));
    public static pb::MessageParser<M2C_FrieBattleEvent_PlayEffect> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private long fromUnitId_;
    public long FromUnitId {
      get { return fromUnitId_; }
      set {
        fromUnitId_ = value;
      }
    }

    private long belongToUnitId_;
    public long BelongToUnitId {
      get { return belongToUnitId_; }
      set {
        belongToUnitId_ = value;
      }
    }

    private string battleKey_ = "";
    public string BattleKey {
      get { return battleKey_; }
      set {
        battleKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BattleKey);
      }
      if (FromUnitId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FromUnitId);
      }
      if (BelongToUnitId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(BelongToUnitId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (UnitId != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(UnitId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (FromUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromUnitId);
      }
      if (BelongToUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BelongToUnitId);
      }
      if (BattleKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleKey);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      battleKey_ = "";
      fromUnitId_ = 0;
      belongToUnitId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      unitId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            BattleKey = input.ReadString();
            break;
          }
          case 24: {
            FromUnitId = input.ReadInt64();
            break;
          }
          case 32: {
            BelongToUnitId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 752: {
            UnitId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
